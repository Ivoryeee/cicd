# Workflow 이름 
name: Java CI and CD with Gradle

# Event Trigger 환경
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

# Workflow 구성하는 Job들 
jobs:
  build:		
    # 실행환경 설정
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      
    # 현재 Job을 구성하는 Step들
    steps:
    # `-`으로 Step을 구분
    
    # Action을 사용하여 Step을 구성
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Caching으로 빌드 속도 줄이기
    - name: Gradle Caching
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    # permission denied로 빌드 실패 시 관리자 권한으로 빌드  
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    # 빌드 
    - name: Build with Gradle Wrapper
      run: ./gradlew clean build

    # 디버깅: build/libs 디렉토리 내 파일 목록 출력
#    - name: List build/libs directory after build
#      run: |
#        ls -al ./build/libs/

    # 디버깅: 빌드 후 생성된 JAR 파일 확인
#    - name: Check if JAR file exists in build/libs
#      run: |
#        echo "Checking for JAR file in build/libs"
#        find $(pwd)/build/libs -name "*.jar"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    # SSH 설정
    - name: Set up SSH for EC2 deployment
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    # 동적으로 .jar 파일 경로를 설정하여 EC2에 복사
#    - name: Set JAR_FILE dynamically
#      run: |
#        JAR_FILE="/home/runner/work/cicd/cicd/build/libs/cicd-1.0-SNAPSHOT.jar"
#        echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV  # 환경 변수로 설정
#        echo "Found JAR file: $JAR_FILE"

    - name: Copy .jar file to EC2
      run: |
        JAR_FILE="/home/runner/work/cicd/cicd/build/libs/cicd-1.0-SNAPSHOT.jar"
        scp -i ~/.ssh/id_rsa $JAR_FILE ec2-user@${{ secrets.SERVER_IP }}:/home/ec2-user/

    - name: Deploy to AWS EC2
      run: |
        JAR_FILE=$(ls ./build/libs/*.jar | head -n 1)
        ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.SERVER_IP }} << 'EOF'
          # Stop the current application 
          pkill -f 'java -jar'
          # Start the new application
          nohup java -jar /home/ec2-user/$(basename $JAR_FILE) > /home/ec2-user/app.log 2>&1 &
        EOF
